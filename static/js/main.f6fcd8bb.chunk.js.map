{"version":3,"sources":["api/api.ts","api/posts.ts","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","request","specify","a","fetch","result","json","getPostComments","postId","getUserPosts","userId","getPostDetails","PostsList","selectPostId","post","useState","currentPostList","setPostList","useEffect","finder","className","map","singlePost","title","type","onClick","id","postComment","name","email","body","method","headers","JSON","stringify","NewCommentForm","currentPostId","needToUpdate","setNeedToUpdate","setName","setEmail","emailValid","setEmailValid","isValidEmail","emailAdress","test","memo","setMemo","onSubmit","event","preventDefault","placeholder","required","value","onChange","target","classNames","NewCommentForm__input","PostDetails","commentsList","setCommentsList","currPost","setCurrPost","isCommentsVisible","setVisibilityOfComments","res","length","singleComment","App","currentUser","setCurrentUser","selectedPostId","setSelectedPostId","userList","setUserList","getUsersFromServer","Number","singleUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f6fcd8bb.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function request(specify : string) { // body of main request from server\n  const result = await fetch(`${BASE_URL}/${specify}`);\n\n  return result.json();\n}\n\nexport function deleteRequest(specify : string) : Promise<Response> { // body of main request to delete on server\n  const result = fetch(`${BASE_URL}/${specify}`, { method: 'DELETE' });\n\n  return result;\n}\n\nexport async function getPostComments(postId : number) {\n  const result = await request(`comments?postId=${postId}`);\n\n  return result;\n}\n","import { request } from './api';\n\nexport async function getUserPosts(userId : number) {\n  let result;\n\n  if (userId === 0) {\n    result = await request('posts');\n\n    return result;\n  }\n\n  result = await request(`/posts?userId=${userId}`);\n\n  return result.json();\n}\n\nexport async function getPostDetails(postId : number) {\n  const result = await request(`/posts/${postId}`);\n\n  return result;\n}\n","/* eslint-disable react/require-default-props */\nimport React, { useEffect, useState } from 'react';\nimport { getUserPosts } from '../../api/posts';\nimport { Post } from '../../react-app-env';\nimport './PostsList.scss';\n\ninterface Props {\n  userId: number; // current user id\n  selectPostId: (arg0: number | null) => void; // lifting state up, choosing selected post\n  post: number | null; // displayed post\n}\n\nexport const PostsList: React.FC<Props> = ({ userId, selectPostId, post }) => {\n  const [currentPostList, setPostList] = useState<Post[]>([]);\n\n  async function finder() { // async function to get array of posts of currentUser\n    const result = await getUserPosts(userId);\n\n    setPostList(result);\n  }\n\n  useEffect(() => { // if user changed make new request to server, to get new array of posts\n    finder();\n  }, [userId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <ul className=\"PostsList__list\">\n        {\n          currentPostList.map(singlePost => ( // making list of posts list\n            <li className=\"PostList__item\">\n              <div>\n                <b>{`[User] #${singlePost.userId} `}</b>\n                {singlePost.title}\n              </div>\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => { // button to open/close posts using setState\n                  if ((post) && (post === singlePost.id)) {\n                    selectPostId(null);\n                  } else {\n                    selectPostId(singlePost.id);\n                  }\n                }}\n              >\n                {post && (post === singlePost.id)\n                  ? 'close'\n                  : 'open'}\n              </button>\n            </li>\n          ))\n        }\n      </ul>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport async function postComment(\n  name : string, email : string, body : string, postId: number,\n) {\n  await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n}\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { postComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  currentPostId : number;\n  needToUpdate: boolean,\n  setNeedToUpdate: (arg0 : boolean) => void;\n}\n\nexport const NewCommentForm: React.FC<Props> = (\n  { currentPostId, needToUpdate, setNeedToUpdate },\n) => {\n  const [name, setName] = useState('');\n\n  const [email, setEmail] = useState('');\n  const [emailValid, setEmailValid] = useState(true);\n\n  function isValidEmail(emailAdress : string) {\n    // eslint-disable-next-line no-useless-escape\n    const result = (/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(emailAdress));\n\n    return result;\n  }\n\n  const [memo, setMemo] = useState('');\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={async (event) => {\n        event.preventDefault();\n        isValidEmail(email);\n        if (isValidEmail(email)) {\n          await postComment(name, email, memo, currentPostId);\n          setNeedToUpdate(!needToUpdate);\n        } else {\n          setEmailValid(false);\n        }\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          required\n          value={name}\n          onChange={(event) => {\n            setName(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className={classNames(\n            { NewCommentForm__input: emailValid },\n            { 'NewCommentForm__input-invalid': !emailValid },\n          )}\n          required\n          value={email}\n          onChange={(event) => {\n            setEmail(event.target.value);\n            setEmailValid(true);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n          value={memo}\n          onChange={(event) => {\n            setMemo(event.target.value);\n          }}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","/* eslint-disable react/require-default-props */\nimport React, { useEffect, useState } from 'react';\nimport { getPostComments, deleteRequest } from '../../api/api';\nimport { getPostDetails } from '../../api/posts';\nimport { Comment, Post } from '../../react-app-env';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ninterface Props {\n  post: number;\n}\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [commentsList, setCommentsList] = useState<Comment[]>([]);\n  const [currPost, setCurrPost] = useState<Post>();\n  const [isCommentsVisible, setVisibilityOfComments] = useState(true);\n  const [needToUpdate, setNeedToUpdate] = useState(false);\n\n  async function finder() {\n    const result = await getPostComments(post);\n    const res = await getPostDetails(post);\n\n    setCurrPost(res);\n    setCommentsList(result);\n  }\n\n  useEffect(() => {\n    finder();\n    setVisibilityOfComments(true);\n  }, [post, needToUpdate]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      {post\n    && (\n      <>\n        <section className=\"PostDetails__post\">\n          <p>{currPost?.title}</p>\n        </section>\n        <section className=\"PostDetails__comments\">\n          {commentsList.length > 0\n          && (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                setVisibilityOfComments(!isCommentsVisible);\n              }}\n            >\n              {(isCommentsVisible)\n                ? 'Hide comments'\n                : 'Show comments'}\n            </button>\n          )}\n          <ul className=\"PostDetails__list\">\n            { post\n            && (isCommentsVisible)\n            && (commentsList.map(singleComment => (\n              <li key={singleComment.id} className=\"PostDetails__list-item\">\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={async () => {\n                    await deleteRequest(`comments/${singleComment.id}`);\n                    setNeedToUpdate(!needToUpdate);\n                  }}\n                >\n                  X\n                </button>\n                <p>{singleComment.body}</p>\n              </li>\n            )))}\n          </ul>\n        </section>\n        <section>\n          <div className=\"PostDetails__form-wrapper\">\n            <NewCommentForm\n              currentPostId={post}\n              needToUpdate={needToUpdate}\n              setNeedToUpdate={setNeedToUpdate}\n            />\n          </div>\n        </section>\n      </>\n    )}\n    </div>\n\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { User } from './react-app-env';\nimport { request } from './api/api';\n\nconst App: React.FC = () => {\n  const [currentUser, setCurrentUser] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState<number | null>(null);\n  const [userList, setUserList] = useState<User[]>([]);\n\n  useEffect(() => {\n    const getUsersFromServer = async () => {\n      const result = await request('Users');\n\n      setUserList(result);\n    };\n\n    getUsersFromServer();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={(event) => {\n              setCurrentUser(Number(event.target.value));\n            }}\n          >\n            <option value=\"0\">All users</option>\n            {userList.map(singleUser => (\n              <option value={singleUser.id}>{singleUser.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userId={currentUser}\n            selectPostId={setSelectedPostId}\n            post={selectedPostId}\n          />\n        </div>\n\n        {selectedPostId && (\n          <div className=\"App__content\">\n            <PostDetails post={selectedPostId} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}